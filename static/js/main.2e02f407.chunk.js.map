{"version":3,"sources":["Card.js","Cards.js","App.js","serviceWorker.js","index.js"],"names":["Card","mantra","msg","visible","className","Cards","numCards","useState","Array","from","length","fill","visibilities","setVisibilities","counter","setCounter","cleanCount","setCleanCount","map","index","onClick","newVisibilities","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6PAYeA,EATF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,OACVC,EADgC,EAAdC,QACFF,EAAS,IAE7B,OACE,qBAAKG,UAAU,OAAf,SACGF,KCoCQG,G,MAxCD,SAAC,GAAsB,IAAD,IAAnBC,gBAAmB,MAAR,EAAQ,EAClC,EAAsCC,mBAASC,MAAMC,KAAK,CAAEC,OAAQJ,IAAYK,KAAK,IAArF,mBAAKC,EAAL,KAAmBC,EAAnB,KACA,EAA4BN,mBAAS,GAArC,mBAAKO,EAAL,KAAcC,EAAd,KACA,EAAkCR,mBAAS,GAA3C,mBAAKS,EAAL,KAAiBC,EAAjB,KAwBA,OACE,sBAAKb,UAAU,QAAf,UACE,8BAxBY,CAAC,YAEf,oBACA,YACA,cAqBac,KAAI,SAACjB,EAAQkB,GAAT,OAAmB,cAAC,EAAD,CAAMlB,OAAQA,EAAoBE,QAASS,EAAaO,IAA7BA,QAE7D,wBAAQC,QApBM,WAChB,IAAIC,EAAkBT,EACtBS,EAAgBP,GAAW,EAE3BD,EAAgBQ,GAChBN,EAAWD,EAAU,GAEjBA,IAAYR,IACdO,EAAgBL,MAAMC,KAAK,CAAEC,OAAQJ,IAAYK,KAAK,IACtDI,EAAW,GACXE,EAAcD,EAAa,GAC3BM,QAAQC,IAAIP,KASZ,uBACA,8BACE,gDAAmBA,Y,MC1BZQ,MARf,WACE,OACE,qBAAKpB,UAAU,MAAf,SACE,cAAC,EAAD,CAAOE,SAAU,OCKHmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.2e02f407.chunk.js","sourcesContent":["import React from \"react\";\nimport './Card.css'\n\nconst Card = ({ mantra, visible }) => {\n  let msg = visible ? mantra : '*';\n\n  return (\n    <div className=\"Card\">\n      {msg}\n    </div>\n  )\n}\nexport default Card;","import React, { useState } from \"react\";\nimport Card from \"./Card\"\nimport \"./Cards.css\"\n\nconst Cards = ({ numCards = 4 }) => {\n  let [visibilities, setVisibilities] = useState(Array.from({ length: numCards }).fill(0));\n  let [counter, setCounter] = useState(0);\n  let [cleanCount, setCleanCount] = useState(0);\n\n  const mantras = [\n    `I'm Sorry`,\n    'Please Forgive Me',\n    'Thank You',\n    'I Love You'\n  ];\n\n  const flipCards = () => {\n    let newVisibilities = visibilities;\n    newVisibilities[counter] = 1;\n\n    setVisibilities(newVisibilities);\n    setCounter(counter + 1);\n\n    if (counter === numCards) {\n      setVisibilities(Array.from({ length: numCards }).fill(0));\n      setCounter(0);\n      setCleanCount(cleanCount + 1);\n      console.log(cleanCount);\n    }\n  }\n\n  return (\n    <div className=\"Cards\">\n      <div>\n        {mantras.map((mantra, index) => <Card mantra={mantra} key={index} visible={visibilities[index]} />)}\n      </div>\n      <button onClick={flipCards}>Flip Card</button>\n      <div>\n        <h3>Clean count = {cleanCount}</h3>\n      </div>\n    </div>\n  )\n}\n\nexport default Cards;","import React from 'react';\nimport Cards from './Cards';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Cards numCards={4} />\n    </div>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}